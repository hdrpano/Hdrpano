// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Hdrpano
import DJISDK
import Foundation
@_exported import Hdrpano
import Swift
import UIKit
@objc open class Hdrpano : ObjectiveC.NSObject {
  public init(key: Swift.String)
  public struct coor {
    public var lon: Swift.Double
    public var lat: Swift.Double
    public var alt: Swift.Double
    public var altGround: Swift.Double
    public var heading: Swift.Double
  }
  public struct gimbal {
    public var pitch: Swift.Float
    public var roll: Swift.Float
    public var yaw: Swift.Float
  }
  public struct aircraft {
    public var pitch: Swift.Double
    public var roll: Swift.Double
    public var yaw: Swift.Double
  }
  public struct settings {
    public var rows: Swift.Int
    public var cols: Swift.Int
    public var lens: Swift.Int
    public var gimb: Swift.Int
    public var nadir: Swift.Int
  }
  open class func degreesToRadians(degrees: Swift.Double) -> Swift.Double
  open class func radiansToDegrees(radians: Swift.Double) -> Swift.Double
  open class func getDistanceBetweenTwoPoints(point1: CoreLocation.CLLocation, point2: CoreLocation.CLLocation) -> Swift.Double
  open class func getBearingBetweenTwoPoints(point1: CoreLocation.CLLocation, point2: CoreLocation.CLLocation) -> Swift.Double
  open class func setModelName(model: Swift.String)
  open class func yawControl(yaw: Swift.Float) -> Swift.Float
  open class func setGimbalExtension(enabled: Swift.Bool = true)
  open class func setYawSimultaneousFollow(enabled: Swift.Bool = true)
  open class func setGimbalAutoLock(enabled: Swift.Bool = true)
  open class func setGimbalMode(gimbalMode: DJISDK.DJIGimbalMode = .yawFollow)
  open class func levelGPS() -> Swift.Int
  open class func getStartPosition() -> CoreLocation.CLLocationCoordinate2D?
  open class func getStartAltitude() -> Swift.Double
  open class func setShootMode(shootMode: DJISDK.DJICameraShootPhotoMode = .single)
  open class func setExposureModeProgram()
  open class func setExposureModeManual()
  open class func setExposureMode(exposureMode: DJISDK.DJICameraExposureMode = .program)
  open class func setAspectRatio(aspectRatio: DJISDK.DJICameraPhotoAspectRatio)
  open class func setOptimumRatio()
  open class func setFileFormat(fileFormat: DJISDK.DJICameraPhotoFileFormat = .RAW)
  open class func setCameraMode(shootMode: DJISDK.DJICameraMode = .shootPhoto)
  open class func setFocusModeAuto()
  open class func setFocusMode(focusMode: DJISDK.DJICameraFocusMode = .auto)
  open class func setShutterSpeed(shutterSpeed: DJISDK.DJICameraShutterSpeed)
  open class func setCameraAperture(aperture: DJISDK.DJICameraAperture)
  open class func setExposureCompensation(EV: DJISDK.DJICameraExposureCompensation)
  open class func setISO(ISO: DJISDK.DJICameraISO)
  open class func setCenterFocus(x: Swift.Double = 0.5, y: Swift.Double = 0.5)
  open class func getSDPhotoCount() -> Swift.Int
  open class func getDisplayName() -> Swift.String
  open class func isFocus() -> Swift.Bool
  open class func isFlying() -> Swift.Bool
  open class func isAL() -> Swift.Bool
  open class func getLens()
  open class func getZoomLens()
  open class func setAE2AM()
  open class func startInternPano(fileFormat: DJISDK.DJICameraPhotoFileFormat, panoMode: DJISDK.DJICameraPhotoPanoramaMode)
  open class func resetInternPanorama()
  open class func getBurstCount() -> Swift.Int
  open class func getAEBCount() -> Swift.Int
  open class func shootGCDPhoto()
  open class func stopShootCamPhoto()
  open class func yaw(yawAngle: Swift.Float)
  open class func yawSpeed(speed: Swift.Float)
  open class func yawGimbal(pitch: Swift.Float, roll: Swift.Float, yaw: Swift.Float)
  open class func resetGimbal()
  open class func prepareVirtualStick()
  open class func isVirtualStick() -> Swift.Bool
  open class func isVirtualStickAdvanced() -> Swift.Bool
  open class func startVirtualStick()
  open class func startAdvancedVirtualStick()
  open class func stopVirtualStick()
  open class func stopAdvancedVirtualStick()
  open class func setMaxHeight(Height: Swift.UInt)
  open class func setMaxRadius(Radius: Swift.UInt)
  open class func setLowBattery(Low: Swift.UInt8)
  open class func setThermalSpotTarget(x: Swift.Double = 0.5, y: Swift.Double = 0.5)
  open class func setDualDisplayModeThemal(displayMode: DJISDK.DJICameraDisplayMode = DJICameraDisplayMode.visualOnly)
  open class func setDualDisplayMode(displayMode: DJISDK.DJICameraDisplayMode = DJICameraDisplayMode.visualOnly)
  open class func setDualGainMode(gainMode: DJISDK.DJICameraThermalGainMode = DJICameraThermalGainMode.auto)
  open class func setThermalDigitalZoomFactor(zoomFactor: DJISDK.DJICameraThermalDigitalZoomFactor = DJICameraThermalDigitalZoomFactor.factorx1)
  open class func setThermalUnit(thermalUnit: DJISDK.DJICameraTemperatureUnit = DJICameraTemperatureUnit.celsius)
  open class func setMSXLevel(msxLevel: Swift.UInt8 = 50)
  open class func setDualFeedVerticalAlignmentOffset(dualOffset: Swift.Int8 = 0)
  open class func setDualFeedHorizontalAlignmentOffset(dualOffset: Swift.Int8 = 0)
  open class func createGridLinear(cols: Swift.Int, rows: Swift.Int, maxGimb: Swift.Float, maxNadir: Swift.Float) -> [[Swift.Float]]
  open class func createGridSpheric(cols: Swift.Int, rows: Swift.Int, maxGimb: Swift.Float, maxNadir: Swift.Float, Nb: Swift.Int) -> [[Swift.Float]]
  open class func shootTLPano(grid: [[Swift.Float]]) -> [DJISDK.DJIMissionControlTimelineElement]
  open class func shootTLPanoGimbal(grid: [[Swift.Float]]) -> [DJISDK.DJIMissionControlTimelineElement]
  open class func buildInception(takeoffAltitude: Swift.Float, aircraftHeading: Swift.Float, aircraftModel: Swift.String, aircraftLocationStart: CoreLocation.CLLocationCoordinate2D, aircraftAltitude: Swift.Double, radiusStart: Swift.Double, radiusEnd: Swift.Double) -> [DJISDK.DJIMissionControlTimelineElement]
  open class func latm(latitude: Swift.Double, distance: Swift.Double, aircraftHeading: Swift.Float, radiusM: Swift.Double = 6371000) -> Swift.Double
  open class func lonm(latitude: Swift.Double, longitude: Swift.Double, latitudeM: Swift.Double, distance: Swift.Double, aircraftHeading: Swift.Float, radiusM: Swift.Double = 6371000) -> Swift.Double
  open class func newCoor(latitude: Swift.Double, longitude: Swift.Double, distance: Swift.Double, aircraftHeading: Swift.Float, radiusM: Swift.Double = 6371000) -> [Swift.Double]
  open class func tabFlyTo(aircraftHeading: Swift.Float, aircraftLocation: CoreLocation.CLLocationCoordinate2D, takeOffAltitude: Swift.Double, distance: Swift.Double, direction: Swift.Double) -> [DJISDK.DJIMissionControlTimelineElement]
  open class func transposeDisplayTab(viewWidth: Swift.Int, viewHeight: Swift.Int, touchX: Swift.Int, touchY: Swift.Int, aircraftAltitude: Swift.Double, aircraftHeading: Swift.Double) -> [Swift.Double]
  open class func getRCFlightModeSwitch() -> Swift.Int
  open class func shootPhotoTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func shoot3PhotoTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func shoot10PhotoTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func stop10PhotoTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func gimbalAttitudeActionTL(pitch: Swift.Float, yaw: Swift.Float) -> DJISDK.DJIGimbalAttitudeAction?
  open class func gimbalActionTL(pitch: Swift.Float, yaw: Swift.Float) -> DJISDK.DJIMissionControlTimelineElement?
  open class func aircraftYawRelativeTL(yaw: Swift.Float) -> DJISDK.DJIMissionControlTimelineElement?
  open class func aircraftYawAbsoluteTL(yaw: Swift.Float) -> DJISDK.DJIMissionControlTimelineElement?
  open class func startVideoTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func stopVideoTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func hotPointTL() -> DJISDK.DJIMissionControlTimelineElement?
  open class func gotoTL(coordinate: CoreLocation.CLLocationCoordinate2D) -> DJISDK.DJIMissionControlTimelineElement?
  open class func gotoxyzTL(coordinate: CoreLocation.CLLocationCoordinate2D, altitude: Swift.Double) -> DJISDK.DJIMissionControlTimelineElement?
  open class func gotozTL(altitude: Swift.Double) -> DJISDK.DJIMissionControlTimelineElement?
  open class func takeOffTL(altitude: Swift.Double) -> DJISDK.DJIMissionControlTimelineElement?
  open class func landTL(altitude: Swift.Double) -> DJISDK.DJIMissionControlTimelineElement?
  open class func gotoLinearActionTL(latitude: Swift.Double, longitude: Swift.Double, altitude: Swift.Double, heading: Swift.Double, distance: Swift.Double, RL: Swift.Int) -> DJISDK.DJIMissionControlTimelineElement?
  open class func photogrammetry3DTL(lat: Swift.Double, lon: Swift.Double, altitude: Swift.Double, altitudeGround: Swift.Double, radius: Swift.Double, cols: Swift.Int, rows: Swift.Int) -> DJISDK.DJIMissionControlTimelineElement?
  open class func photogrammetry3D(lat: Swift.Double, lon: Swift.Double, altitude: Swift.Double, altitudeGround: Swift.Double, radius: Swift.Double, cols: Swift.Int, rows: Swift.Int) -> DJISDK.DJIWaypointMission?
  open class func defaultHotPointActionTL() -> DJISDK.DJIHotpointAction?
  open class func gotoToLinear(latitude: Swift.Double, longitude: Swift.Double, altitude: Swift.Double, heading: Swift.Double, distance: Swift.Double, RL: Swift.Int) -> DJISDK.DJIWaypointMission?
  open class func getSettings(modelName: Swift.String) -> [Swift.Int]
  open class func fetchCamera() -> DJISDK.DJICamera?
  open class func fetchCameraThermal() -> DJISDK.DJICamera?
  open class func fetchCameraVisual() -> DJISDK.DJICamera?
  open class func fetchFlightController() -> DJISDK.DJIFlightController?
  open class func fetchGimbal() -> DJISDK.DJIGimbal?
  open class func fetchLightbridge() -> DJISDK.DJILightbridgeLink?
  open class func fetchAirLink() -> DJISDK.DJIAirLink?
  open class func fetchRemoteController() -> DJISDK.DJIRemoteController?
  open class func getLensInformation(Lens: Swift.String) -> Swift.Int
  open class func addKeyListener()
  open class func currentDate() -> Swift.String
  open class func xmlHeader(modelName: Swift.String, panoSettings: [Swift.Int]) -> Swift.String
  open class func xmlPos(yaw: Swift.Float, pitch: Swift.Float, counter: Swift.Int) -> Swift.String
  open class func xmlEnd(counter: Swift.Int, heading: Swift.Float, zenith: Swift.Int) -> Swift.String
  open class func createGenericXML(grid: [[Swift.Float]], modelName: Swift.String) -> Swift.String
  open class func saveGenericXmlFile(xml: Swift.String, modelName: Swift.String) -> Foundation.URL
  open class func getDocumentsDirectory() -> Foundation.URL
  open class func gimbalPitchDraw(pitch: Swift.Double, rect: CoreGraphics.CGRect, manual: Swift.Bool = false, rows: Swift.Int = 8, maxGimb: Swift.Int = 30)
  open class func gimbalYawDraw(yaw: Swift.Double, gimbalYaw: Swift.Double, rect: CoreGraphics.CGRect, airSense: Swift.Double = -200, manual: Swift.Bool = false, columns: Swift.Int = 0, menuMode: Swift.String = "pano")
  open class func nadirView(rect: CoreGraphics.CGRect, touchX: Swift.Double, touchY: Swift.Double, heading: Swift.Double = 0, info: Swift.String = "", scale: Swift.Double = 1)
  open class func rescueTapDraw(width: Swift.Double, height: Swift.Double, scale: Swift.Double, rect: CoreGraphics.CGRect)
  open class func calibrateCompass()
  open class func stopCalibrateCompass()
  open class func compassErrorCheck() -> Swift.Bool
  open class func setLB(percent: Swift.Float = 1.0)
  open class func isZoom() -> Swift.Bool
  open class func isLB() -> Swift.Bool
  open class func isLensSupported() -> Swift.Bool
  open class func Lightbride()
  @objc override dynamic public init()
  @objc deinit
}
